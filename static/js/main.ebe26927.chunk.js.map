{"version":3,"sources":["components/Lovelace/fish.png","components/NavBar/cow_logo.png","components/NavBar/NavBar.js","components/Predictions/Predictions.js","components/Lovelace/Lovelace.js","components/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","Navbar","bg","variant","Brand","href","alt","src","cow","width","height","Toggle","aria-controls","Collapse","id","Nav","Link","Prediction","props","state","file","pred","handleChange","bind","handleFormSubmit","event","this","setState","URL","createObjectURL","target","files","preventDefault","data","FormData","append","uploadInput","fetch","method","body","then","response","json","prediction","onSubmit","ref","type","onChange","for","style","color","React","Component","Lovelace","fish","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,+QC4B5BC,EAvBA,kBACX,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACjB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPV,UAAU,6BACT,IAPL,YAUA,kBAACC,EAAA,EAAOU,OAAR,CAAeC,gBAAc,0BAC3B,kBAACX,EAAA,EAAOY,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKf,UAAU,WACb,kBAACe,EAAA,EAAIC,KAAL,CAAUX,KAAK,SAAf,c,yBCsCCY,G,kBAvDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,KACNC,KAAM,MAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBART,E,0EAWNE,GACTC,KAAKC,SAAS,CACVP,KAAMQ,IAAIC,gBAAgBJ,EAAMK,OAAOC,MAAM,Q,uCAI9BN,G,+EACnBA,EAAMO,kBAEAC,EAAO,IAAIC,UACZC,OAAO,OAAQT,KAAKU,YAAYL,MAAM,IAE3CM,MAAM,8BAA+B,CACjCC,OAAQ,OACRC,KAAMN,IACPO,MAAK,SAACC,GACLA,EAASC,OAAOF,MAAK,SAACD,GAClB,EAAKZ,SAAS,CACVN,KAAMkB,EAAKI,mB,gFAMjB,IAAD,OACL,OACI,yBAAK3C,UAAU,cACX,yBAAKA,UAAU,aACX,0BAAM4C,SAAUlB,KAAKF,kBACjB,2BAAOqB,IAAK,SAACA,GAAU,EAAKT,YAAcS,GAAQ7C,UAAU,WAAW8C,KAAK,OAAOhC,GAAG,cAAciC,SAAUrB,KAAKJ,eACnH,2BAAO0B,IAAI,cAAchD,UAAU,aAAnC,mBACA,4BAAQA,UAAU,YAAlB,YAEJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,WAAWO,IAAKmB,KAAKP,MAAMC,OAC1C,wBAAIpB,UAAU,aAAd,gBACA,uBAAGA,UAAU,WAAWiD,MAAO,CAACC,MAAOxB,KAAKP,MAAME,OAAS,CAAC,QAAU,UAAY,YAAaK,KAAKP,MAAME,a,GAhDzG8B,IAAMC,YCIVC,G,uLAEjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKrD,UAAU,OACX,4BAAQA,UAAU,cAClB,yBAAKO,IAAK+C,IAAMtD,UAAU,WAAWM,IAAI,gB,GARf8C,c,QCLvBG,E,iLCIX,OACE,kBAAC,mBAAD,KACE,kBAAC,EAAD,W,GAJyBH,aCQbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.ebe26927.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fish.58653b43.png\";","module.exports = __webpack_public_path__ + \"static/media/cow_logo.76162ea5.png\";","import React from 'react';\nimport { Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport cow from './cow_logo.png';\n\nconst NavBar = () => (\n    <div className=\"Nav\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src={cow}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n          Lovelace\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"about\">About</Nav.Link>\n            </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n);\n\nexport default NavBar;","import React from 'react';\nimport './Prediction.css';\n\nclass Prediction extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            file: null,\n            pred: null\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleFormSubmit = this.handleFormSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({\n            file: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    async handleFormSubmit(event) {\n        event.preventDefault();\n\n        const data = new FormData()\n        data.append('file', this.uploadInput.files[0])\n\n        fetch('http://0.0.0.0:5000/predict', {\n            method: 'POST',\n            body: data,\n        }).then((response) => {\n            response.json().then((body) => {\n                this.setState({\n                    pred: body.prediction\n                })\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Prediction\">\n                <div className=\"Pred-body\">\n                    <form onSubmit={this.handleFormSubmit}>\n                        <input ref={(ref) => { this.uploadInput = ref; }} className=\"Image-in\" type=\"file\" id=\"file-select\" onChange={this.handleChange}/>\n                        <label for=\"file-select\" className=\"Image-lbl\">Choose an Image</label>\n                        <button className=\"Pred-btn\">Predict</button>\n                    </form>\n                    <div className=\"Pred-zone\">\n                        <img className=\"Img-disp\" src={this.state.file}/>\n                        <h1 className=\"Pred-text\">Predictions:</h1>\n                        <p className=\"Pred-val\" style={{color: this.state.pred === [\"none\"] ? \"#cf1e25\" : \"#7CFC00\"}}>{this.state.pred}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Prediction","import React, { Component } from 'react';\nimport fish from './fish.png';\nimport NavBar from '../NavBar/NavBar';\nimport Prediction from '../Predictions/Predictions';\n\nimport './Lovelace.css';\n\nexport default class Lovelace extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Prediction />\n        <div className=\"App\">\n            <header className=\"App-header\">\n            <img src={fish} className=\"App-logo\" alt=\"logo\" />\n            </header>\n        </div>\n    </div>\n    );\n  }\n}\n","import App from \"./App/App\";\n\nexport default App;\n","import React, { Component } from 'react';\nimport Lovelace from '../Lovelace/Lovelace';\nimport { ParallaxProvider } from 'react-scroll-parallax'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <ParallaxProvider>\n        <Lovelace />\n      </ParallaxProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}